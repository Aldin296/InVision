@inject DialogService DialogService
@inject NoteService NoteService
@inject ILocalStorageService localstore
@using InVision.Data.Service
@using InVision.Data.Model



<RadzenTemplateForm TItem="Note" Data="@model" Submit=@OnSubmit InvalidSubmit="@OnInvalidSubmit">
	<div class="row" style="margin-bottom: 16px">
		<div class="col-md-3">
			<RadzenLabel Text="Title" />
		</div>
		<div class="col">
			<RadzenTextBox @bind-Value="@model.Title" Name="Title"></RadzenTextBox>
			<RadzenRequiredValidator Text="Title is required" Component="Title" />
			<RadzenCustomValidator Component="Title" Text="@validationText" Validator="@(() => TitleValidator(model.Title))" />
		</div>
	</div>

	<div class="row">
		<div class="col-md-3"></div>
		<div class="col">
			<RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
		</div>
	</div>
</RadzenTemplateForm>

@code {
	[Parameter]
	public string Title { get; set; }
	List<Note> notes = new List<Note>();
	string userid;
	string validationText;

	Note model = new Note();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		userid = await localstore.GetItemAsync<string>("UserId");
		notes = await NoteService.GetAllNotesAsync(userid);
	}

	protected override void OnParametersSet()
	{
		model.Title = Title;
		model.Content = " ";
		model.Icon = " ";
	}

	async void OnSubmit(Note model)
	{
		//userid = await localstore.GetItemAsync<string>("UserId");
		//await NoteService.CreateNote(userid,model);
		DialogService.Close(model);
		Console.WriteLine("Valid submit");
	}

	void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
	{
		Console.WriteLine("invalid submit");
	}

	bool TitleValidator(string input)
	{
		bool valid = true;
		foreach (var note in notes)
		{
			if (input != note.Title)
			{
				valid = true;
			}
			else if( input == note.Title)
			{
				validationText = $"There already is a note withe the Title {note.Title}";
				return false;
			}
		}
		return valid;

	}
}