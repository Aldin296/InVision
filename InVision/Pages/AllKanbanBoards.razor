@page "/allKanbanBoards"
@using InVision.Data;
@using InVision.Data.Service
@using InVision.Data.Model
@inject NavigationManager NavManager
@inject DialogService DialogService
@inject KBoardService kboardService
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService
@inject Blazored.LocalStorage.ILocalStorageService localstore



@if (filteredBoards == null)
{
    <p>Loading...</p>
}
else
{
    <RadzenPanel>
        <HeaderTemplate>
            <RadzenText TextStyle="TextStyle.H6" Class="rz-display-flex rz-align-items-center rz-m-0">
                <RadzenIcon Icon="account_box" class="rz-mr-1" /><b>Kanban Boards</b>
            </RadzenText>
            <RadzenIcon Icon="add_circle_outline" @onclick="()=>OnAddItem()" Style="cursor: pointer; padding-right: 20px; font-size: 2em" class="add-todoitem-icon"></RadzenIcon>
        </HeaderTemplate>
        <ChildContent>
            <br />
            <RadzenFormField Text="" Variant="Variant.Text" Style="padding-left: 7px">
                <RadzenTextBox @bind-Value="@searchValue" @oninput="SearchBoards" Style="width: 100%;" />
            </RadzenFormField>
            <RadzenIcon style="font-weight: 20; margin-top: 20px" Icon="search"></RadzenIcon>
            <br />
            <br />
            <RadzenDataList WrapItems="true" AllowPaging="false" Data="@filteredBoards" TItem="KBoard">
                <Template Context="kboard">
                    <RadzenCard Style="width: 250px" ContextMenu=@(args => ShowContextMenuWithItems(args,kboard)) @onclick="()=>OpenKanbanBoard(kboard)" class="kanban-card">
                        <RadzenRow>
                            <RadzenColumn Size="12" class="rz-text-align-start">
                                <RadzenText BadgeStyle="BadgeStyle.Success" TextStyle="TextStyle.H5">@kboard.Name</RadzenText>
                                </RadzenColumn>
                            </RadzenRow>
                            <hr style="border: none; background-color: var(--rz-text-disabled-color); height: 1px; margin: 1rem 0;" />
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                                <RadzenStack Gap="0">
                                    <RadzenText TextStyle="TextStyle.Body1">@kboard.Description</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2">@kboard.CreatedBy</RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            </ChildContent>
        </RadzenPanel>
}


@code {
    List<KBoard>? boards;
    List<KBoard> filteredBoards;
    string searchValue;
    string userId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        userId = await localstore.GetItemAsync<string>("UserId");
        boards = await Task.Run(() => kboardService.GetAllKBoardsAsync(userId));

        foreach(KBoard x in boards)
        {
            Console.WriteLine("ID:" + x.Id + "Name:" + x.Name + "\n");
        }
        filteredBoards = boards;

        if (firstRender)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OpenKanbanBoard(KBoard selectedBoard)
    {
        kboardService.selectedBoard = selectedBoard;
        NavManager.NavigateTo("/kanbanBoard/" + selectedBoard.Id);
    }

    private async void OnAddItem()
    {
        KBoard board = await DialogService.OpenAsync<AddKanbanBoardPage>("Add Kanban Board");
        if (board != null)
        {
            if (board.Name != null && board.Description != null)
            {
                boards.Add(board);
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Kboard erstellen abgebrochen");
            }
        }
        else
        {
            Console.WriteLine("Kboard erstellen abgebrochen");
        }
    }

    private async void OnDeleteBoard(KBoard board)
    {
        await kboardService.DeleteKBoard(userId, board.Id);
        boards.RemoveAll(x=>x.Id == board.Id);
        filteredBoards.RemoveAll(x => x.Id == board.Id);
        UpdateFilteredBoards();

        StateHasChanged();

    }

    void ShowContextMenuWithItems(MouseEventArgs args, KBoard board)
    {

        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Delete", Value = 1, Icon = "delete" },},
            (MenuItemEventArgs eventArgs) => OnMenuItemClick(eventArgs, board));
        UpdateFilteredBoards();

    }

    void OnMenuItemClick(MenuItemEventArgs args, KBoard board)
    {
        if (args.Value.Equals(1))
        {
            OnDeleteBoard(board);
            ContextMenuService.Close();
        }
    }
    //void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "To delete the Board press right click!", options);

    private void UpdateFilteredBoards()
    {
        if (string.IsNullOrEmpty(searchValue))
        {
            filteredBoards = new List<KBoard>(boards);
        }
        else
        {
            filteredBoards = boards.Where(b => b.Name.Contains(searchValue, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        StateHasChanged();
    }

    private void SearchBoards(ChangeEventArgs args)
    {
        searchValue = args.Value.ToString();
        UpdateFilteredBoards();
    }
}