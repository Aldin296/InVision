@page "/allKanbanBoards"
@using InVision.Data
@inject KBoardService boardService
@inject NavigationManager NavManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService tooltipService
@inject Blazored.LocalStorage.ILocalStorageService localstore


@if (boards == null)
{
	<p>Loading...</p>
}
else
{
	<RadzenPanel>
		<HeaderTemplate>
			<RadzenText TextStyle="TextStyle.H6" Class="rz-display-flex rz-align-items-center rz-m-0">
				<RadzenIcon Icon="account_box" class="rz-mr-1" /><b>Kanban Boards</b>
			</RadzenText>
			<RadzenIcon Icon="add_circle_outline" @onclick="()=>OnAddItem()" Style="cursor: pointer; padding-right: 20px; font-size: 2em" class="add-todoitem-icon"></RadzenIcon>
		</HeaderTemplate>
		<ChildContent>
			<RadzenDataList WrapItems="true" AllowPaging="true" Data="@boards" TItem="KBoard">
				<Template Context="kboard">
					<RadzenCard Style="width: 250px" MouseEnter="@(args => ShowTooltip(args, new TooltipOptions(){ Delay = 500}))" ContextMenu=@(args => ShowContextMenuWithItems(args,kboard)) @onclick="()=>OpenKanbanBoard(kboard)" class="kanban-card">
						<RadzenRow>
							<RadzenColumn Size="12" class="rz-text-align-start">
								<RadzenText BadgeStyle="BadgeStyle.Success" TextStyle="TextStyle.H5">@kboard.Name</RadzenText>
								</RadzenColumn>
							</RadzenRow>
							<hr style="border: none; background-color: var(--rz-text-disabled-color); height: 1px; margin: 1rem 0;" />
							<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
								<RadzenStack Gap="0">
									<RadzenText TextStyle="TextStyle.Body1">@kboard.Description</RadzenText>
									<RadzenText TextStyle="TextStyle.Body2">@kboard.CreatedBy</RadzenText>
								</RadzenStack>
							</RadzenStack>
						</RadzenCard>
					</Template>
				</RadzenDataList>
			</ChildContent>
		</RadzenPanel>
}


@code {
	List<KBoard> boards;

	protected override async Task OnInitializedAsync()
	{
		string userId = await localstore.GetItemAsync<string>("UserId");
		boards = await Task.Run(() => boardService.GetAllKBoardsAsync(userId));
	}

	private void OpenKanbanBoard(KBoard selectedBoard)
	{
		boardService.selectedBoard = selectedBoard;
		NavManager.NavigateTo("/kanbanBoard/" + selectedBoard.Id);
	}

	private async void OnAddItem()
	{
		KBoard board = await DialogService.OpenAsync<AddKanbanBoardPage>("Add Kanban Board");
		if (board != null)
		{
			if (board.Name != null && board.Description != null)
			{
				boards.Add(board);
				StateHasChanged();
			}
			else
			{
				Console.WriteLine("Kboard erstellen abgebrochen");
			}
		}
		else
		{
			Console.WriteLine("Kboard erstellen abgebrochen");
		}

	}

	private void OnDeleteBoard(KBoard board)
	{
		// Remove the board from the list
		boards.Remove(board);

		// Trigger a UI update
		StateHasChanged();

		// Optional: Provide feedback to the user
		Console.WriteLine($"Board '{board.Name}' deleted successfully.");
	}

	// Existing code...

	void ShowContextMenuWithItems(MouseEventArgs args, KBoard board)
	{
		ContextMenuService.Open(args,
			new List<ContextMenuItem> {
				new ContextMenuItem(){ Text = "Delete", Value = 1, Icon = "delete" },
				},
			(MenuItemEventArgs eventArgs) => OnMenuItemClick(eventArgs, board));
	}

	void OnMenuItemClick(MenuItemEventArgs args, KBoard board)
	{
		if (args.Value.Equals(1))
		{
			OnDeleteBoard(board);
			ContextMenuService.Close();
		}
	}
	void ShowTooltip(ElementReference elementReference, TooltipOptions options = null) => tooltipService.Open(elementReference, "To delete the Board press right click!", options);

}
