@page "/allNotesPage"
@using InVision.Data
@inject NoteService NoteService
@inject MatIconService Iconservice
@inject NavigationManager NavManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject MatIconService IconService

@inject Blazored.LocalStorage.ILocalStorageService localstore

@if (filteredNotes == null)
{
    <p>Loading...</p>
}
else
{
    <RadzenPanel>
        <HeaderTemplate>
            <RadzenText TextStyle="TextStyle.H6" Class="rz-display-flex rz-align-items-center rz-m-0">
                <RadzenIcon Icon="description" class="rz-mr-1" /><b>Notes</b>
            </RadzenText>
            <RadzenIcon Icon="add_circle_outline" @onclick="()=>OnAddNote()" Style="cursor: pointer; padding-right: 20px; font-size: 2em" class="add-todoitem-icon"></RadzenIcon>
        </HeaderTemplate>
        <ChildContent>
            <br />
            <RadzenFormField Text="" Variant="Variant.Text" Style="padding-left: 7px">
                <RadzenTextBox @bind-Value="@searchValue" @oninput="SearchNotes" Style="width: 100%;" />
            </RadzenFormField>
            <RadzenIcon style="font-weight: 20; margin-top: 20px" Icon="search"></RadzenIcon>
            <br />
            <br />
            <RadzenDataList WrapItems="true" AllowPaging="false" Data="@filteredNotes" TItem="Note">
                <Template Context="note">
                    <RadzenCard Style="width: 250px" ContextMenu=@(args => ShowContextMenuWithItems(args,note)) @onclick="()=>OpenNote(note)" class="kanban-card">
                        <RadzenRow>
                            <RadzenColumn Size="11" class="rz-text-align-start">
                                <RadzenText BadgeStyle="BadgeStyle.Success" TextStyle="TextStyle.H5">@note.Title</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="1">
                                    <RadzenIcon Icon="@note.Icon"></RadzenIcon>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            </ChildContent>
        </RadzenPanel>
}

@code {
    List<Note> notes;

    List<Note> filteredNotes;
    string searchValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        notes = NoteService.notes;
        filteredNotes = notes;

        if (firstRender)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void OnAddNote()
    {
        Note note = await DialogService.OpenAsync<AddNotePage>("Add Note");
        if (note != null)
        {
            if (note.Title != null)
            {
                notes.Add(note);
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Note erstellen abgebrochen");
            }
        }
        else
        {
            Console.WriteLine("NOte erstellen abgebrochen");
        }
    }

    private void OpenNote(Note selectedNote)
    {
        NoteService.selectedNote = selectedNote;
        NavManager.NavigateTo("/note/" + selectedNote.Id);
    }


    void ShowContextMenuWithItems(MouseEventArgs args, Note note)
    {

        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Delete", Value = 1, Icon = "delete" },},
            (MenuItemEventArgs eventArgs) => OnMenuItemClick(eventArgs, note));
        UpdateFilteredNotes();

    }

    void OnMenuItemClick(MenuItemEventArgs args, Note note)
    {
        if (args.Value.Equals(1))
        {
            OnDeleteNote(note);
            ContextMenuService.Close();
        }
    }

    private async void OnDeleteNote(Note note)
    {
        //await kboardService.DeleteKBoard(userId, board.Id);
        notes.Remove(note);
        filteredNotes.Remove(note);
        UpdateFilteredNotes();

        StateHasChanged();

    }

    private void UpdateFilteredNotes()
    {
        if (string.IsNullOrEmpty(searchValue))
        {
            filteredNotes = new List<Note>(notes);
        }
        else
        {
            filteredNotes = notes.Where(b => b.Title.Contains(searchValue, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        StateHasChanged();
    }

    private void SearchNotes(ChangeEventArgs args)
    {
        searchValue = args.Value.ToString();
        UpdateFilteredNotes();
    }


}
