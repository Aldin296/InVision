@using InVision.Data
@using InVision.Data.Service
@using InVision.Data.Model
@inject NoteService NoteService
@inject MatIconService Iconservice
@inject NavigationManager NavManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject MatIconService IconService


<RadzenPanel>
    <RadzenFormField Text="" Variant="Variant.Text" Style="padding-left: 7px">
        <RadzenTextBox @bind-Value="@searchValue" @oninput="SearchNotes" Style="width: 100%;" />
    </RadzenFormField>
    <RadzenIcon style="font-weight: 20; margin-top: 20px" Icon="search"></RadzenIcon>
    <RadzenDataList WrapItems="true" AllowPaging="false" Data="@notes" TItem="Note">
        <Template Context="note">
            @if (note.Icon != null)
            {
                <RadzenCard Style="width: 250px" @onclick="()=>OpenNote(note)" class="kanban-card">
                    <RadzenRow>
                        <RadzenColumn Size="11" class="rz-text-align-start">
                            <RadzenText BadgeStyle="BadgeStyle.Success" TextStyle="TextStyle.H5">@note.Title</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="1">
                                <RadzenIcon Icon="@note.Icon"></RadzenIcon>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>
            }
        </Template>
    </RadzenDataList>
    <RadzenButton Text="OK" Click=@OnOkClick />
    <RadzenButton Text="Cancel" Click=@OnCancelClick ButtonStyle="ButtonStyle.Secondary" />
</RadzenPanel>


@code {
    List<Note> notes;
    List<Note> filteredNotes;
    string selectedNoteIcon;
    string searchValue;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        notes = NoteService.notes;
        filteredNotes = notes;

        if (firstRender)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OpenNote(Note selectedNote)
    {
        selectedNoteIcon = selectedNote.Icon;
    }

    private void UpdateFilteredNotes()
    {
        if (string.IsNullOrEmpty(searchValue))
        {
            filteredNotes = new List<Note>(notes);
        }
        else
        {
            filteredNotes = notes.Where(b => b.Title.Contains(searchValue, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        StateHasChanged();
    }

    private void SearchNotes(ChangeEventArgs args)
    {
        searchValue = args.Value.ToString();
        UpdateFilteredNotes();
    }

    void OnCancelClick()
    {
        DialogService.Close(null);
    }

    void OnOkClick()
    {
        string result = null;

        if (selectedNoteIcon != null)
        {
            result = selectedNoteIcon;
        }

        DialogService.Close(result);
    }

}
