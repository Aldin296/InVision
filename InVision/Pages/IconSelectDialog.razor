@using InVision.Data
@inject InVision.Data.MatIconService iconService



<RadzenText TextStyle="TextStyle.H6" Class="rz-display-flex rz-align-items-center rz-m-0">
    <RadzenIcon Icon="account_box" class="rz-mr-1" /><b>Kanban Boards</b>
</RadzenText>
<br />
<RadzenFormField Text="" Variant="Variant.Text" Style="padding-left: 7px">
        <RadzenTextBox @bind-Value="@searchValue" @oninput="SearchIcons" Style="width: 100%;" />
</RadzenFormField>
<RadzenIcon style="font-weight: 20; margin-top: 20px" Icon="search"></RadzenIcon>
<br />
<br />
<RadzenDataList WrapItems="true" AllowPaging="false" Data="@filteredIcons" TItem="string">
    <Template Context="icon">
        <RadzenButton Style="background-color: transparent; color:black" Icon="@icon"></RadzenButton>
        <br />
    </Template>
</RadzenDataList>




<RadzenButton Size="ButtonSize.ExtraSmall" Text="Close Side Dialog" Click="@(_ => Service.CloseSide())" />

@code {
    [Inject] DialogService Service { get; set; }
    string searchValue;
    List<string> filteredIcons;
    List<string> icons;

    protected override async Task OnInitializedAsync()
    {
        icons = await Task.Run(() => iconService.GetMaterialDesignIconNames());
        filteredIcons = icons;
    }

    private void SearchIcons(ChangeEventArgs args)
    {
        searchValue = args.Value.ToString();
        UpdateFilteredIcons();
    }

    private void UpdateFilteredIcons()
    {
        if (string.IsNullOrEmpty(searchValue))
        {
            filteredIcons = new List<string>(filteredIcons);
        }
        else
        {
            //filteredIcons = boards.Where(b => b.Name.Contains(searchValue, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        StateHasChanged();
    }
}