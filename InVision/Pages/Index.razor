@page "/index"
@using InVision.Data
@using InVision.Data.Model
@using InVision.Data.Service
@using InVision.Pages
@inject NavigationManager NavManager
@inject DialogService DialogService
@inject MatIconService iconservice
@inject UserService userservice
@inject CalendarService calendarservice
@inject Blazored.LocalStorage.ILocalStorageService localstore

<RadzenCard Style="margin-right:32px">
    <RadzenText TextStyle="TextStyle.H6" Class="rz-display-flex rz-align-items-center rz-m-0">
        <RadzenIcon Icon="dashboard" class="rz-mr-1" /><b>Dashboard</b>
    </RadzenText>
    <br />
    <RadzenRow Class="custom-row-spacing">
        <RadzenColumn Size="12" SizeXS="12" SizeSM="12" SizeMD="6" SizeLG="6" SizeXL="6">
            <RadzenCard>
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
                    <RadzenImage Path="@imagepath" Style="width:6rem; height: 6rem; border-radius: 50%;" />
                    <RadzenStack Gap="0">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">User</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@user?.Name</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0">E-Mail</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@user?.Email</b></RadzenText>
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow Class="custom-row-spacing">
        <RadzenColumn Size="12" SizeXS="12" SizeSM="12" SizeMD="4" SizeLG="4" SizeXL="4">
            <RadzenCard>
                <h6>Open Items</h6>
                <h2 style="color:red">@sumOpenItemsAllBoards</h2>
                <RadzenChart Style="height: 100%; width: 100%">
                    <RadzenColumnSeries Fill="red" Data="@kboards" CategoryProperty="KboardName" Title="Open Items" LineType="LineType.Dashed" ValueProperty="SumOpenItems">
                        <RadzenSeriesDataLabels Visible="false" />
                    </RadzenColumnSeries>
                    <RadzenColumnOptions Radius="5" />
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="false" />
                        <RadzenCategoryAxis Visible="false" />
                        <RadzenValueAxis Visible="false" />
                        <RadzenLegend Visible="false" />
                    </RadzenValueAxis>
                </RadzenChart>
            </RadzenCard>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeXS="12" SizeSM="12" SizeMD="4" SizeLG="4" SizeXL="4">
            <RadzenCard>
                <h6>Closed Items</h6>
                <h2 style="color:green">@sumClosedItemsAllBoards</h2>
                <RadzenChart Style="height: 100%; width: 100%">
                    <RadzenColumnSeries Fill="green" Data="@kboards" CategoryProperty="KboardName" Title="Closed Items" LineType="LineType.Dashed" ValueProperty="SumClosedItmes">
                        <RadzenSeriesDataLabels Visible="false" />
                    </RadzenColumnSeries>
                    <RadzenColumnOptions Radius="5" />
                    <RadzenValueAxis Visible="false">
                        <RadzenGridLines Visible="false" />
                        <RadzenCategoryAxis Visible="false" />
                        <RadzenValueAxis Visible="false" />
                        <RadzenLegend Visible="false" />
                    </RadzenValueAxis>
                </RadzenChart>
            </RadzenCard>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeXS="12" SizeSM="12" SizeMD="4" SizeLG="4" SizeXL="4">
            <RadzenCard Style="height:100%">
                <h6>Progress</h6>
                <RadzenArcGauge Style="width: 100%; height: 120%">
                    <RadzenArcGaugeScale Min="0" Max="100" Radius="1" Margin="0">
                        <RadzenArcGaugeScaleValue Fill="#3700b3" Value=@sumAllItemsAllBoardsPrecentage ShowValue=showValue>
                            <Template Context="pointer">
                                <h4>
                                </h4>
                            </Template>
                        </RadzenArcGaugeScaleValue>
                    </RadzenArcGaugeScale>
                </RadzenArcGauge>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow Class="custom-row-spacing">
        <RadzenColumn Size="12">
            <RadzenCard>
                <h6>Appointments this Month</h6>
                    <RadzenTimeline Orientation="Orientation.Horizontal">
                        <Items>
                            @foreach (var appointment in appointmentsThisMonth)
                            {
                                <RadzenTimelineItem PointStyle="PointStyle.Primary">
                                    <LabelContent>
                                        @if (appointment.Start.Date != appointment.End.Date)
                                        {
                                            @if (appointment.Start.TimeOfDay != TimeSpan.Zero)
                                            {
                                                <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0">@((MarkupString)$"{appointment.Start.ToString("dd.MM.yy")}<br>{appointment.Start.ToString("HH:mm")} - {appointment.End.ToString("HH:mm")}")</RadzenText>
                                            }
                                            else
                                            {
                                                <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0">@($"{appointment.Start.ToString("dd.MM.yy")} - {appointment.End.ToString("dd.MM.yy")}")</RadzenText>
                                            }
                                        }
                                        else
                                        {
                                            @if (appointment.Start.TimeOfDay != TimeSpan.Zero)
                                            {
                                                <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0">@((MarkupString)$"{appointment.Start.ToString("dd.MM.yy")}<br>{appointment.Start.ToString("HH:mm")} - {appointment.End.ToString("HH:mm")}")</RadzenText>
                                            }
                                            else
                                            {
                                                <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0">@appointment.Start.ToString("dd.MM.yy")</RadzenText>
                                            }
                                        }
                                    </LabelContent>
                                    <ChildContent>
                                        @appointment.Text
                                    </ChildContent>
                                </RadzenTimelineItem>
                            }
                        </Items>
                    </RadzenTimeline>   
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
</RadzenCard>

@code {

    int sumOpenItemsAllBoards;
    int sumClosedItemsAllBoards;
    int sumAllItemsAllBoards;
    float sumAllItemsAllBoardsPrecentage;
    bool showValue = false;
    int currentMonth = DateTime.Now.Month;


    private User user;

    public string imagepath;

    List<Appointment> appointmentsThisMonth = new List<Appointment>
    {
        new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };

    public class KboardItem
    {
        public string KboardName { get; set; }
        public int SumOpenItems { get; set; }
        public int SumClosedItmes { get; set; }
    }

    List<KboardItem> kboards = new List<KboardItem>{};
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //string userId = HttpContextAccessor.HttpContext.Session.GetString("UserId");
        string userId = await localstore.GetItemAsync<string>("UserId");
       
        //appointmentsThisMonth = await calendarservice.GetAllAppointmentsAsync(userId);


        if (!string.IsNullOrEmpty(userId))
        {
            user = await userservice.GetUserById(userId);
            
            foreach (Appointment a in user.Appointments)
            {
                //Add every upcoming appointment this month
                //doesnt work if the user doesnt have any appointments
                
                if (a.Start.Month == currentMonth)
                {
                    appointmentsThisMonth.Add(a);
                }
                
            }
            
            foreach (KBoard k in user.KBoards)
            {
                KboardItem board = new KboardItem
                    {
                        KboardName = k.Name,
                    };
                foreach (TodoItem i in k.Items)
                {
                    showValue = true;
                    if(i.State != 2)
                    {
                        board.SumOpenItems++;
                    }
                    else
                    {
                        board.SumClosedItmes++;
                    }
                }
                kboards.Add(board);
            }
            foreach (var citem in kboards)
            {
                sumClosedItemsAllBoards += citem.SumClosedItmes;
                sumAllItemsAllBoards += citem.SumClosedItmes;
                sumOpenItemsAllBoards += citem.SumOpenItems;
                sumAllItemsAllBoards += citem.SumOpenItems;
            }


            sumAllItemsAllBoardsPrecentage = (100f / sumAllItemsAllBoards) * sumClosedItemsAllBoards;

            //appointmentsThisMonth = await calendarservice.GetAllAppointmentsAsync(userId);


            if (user != null && user.ProfilePicture != null && user.ProfilePicture.Length > 0)
            {
                // Convert byte array to base64 string
                imagepath = $"data:image/png;base64,{Convert.ToBase64String(user.ProfilePicture)}";
            }
            else
            {
                // Set a default image path if no profile picture is available
                imagepath = "https://static-00.iconduck.com/assets.00/profile-circle-icon-512x512-zxne30hp.png";
            }

            if (firstRender)
            {

                StateHasChanged();
            }


        }
        else
        {
            // Handle the case when the UserId is not in the session
        }
    }
}
