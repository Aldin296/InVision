@page "/note/{noteId}"
@using InVision.Data
@using InVision.Data.Service
@using InVision.Data.Model
@inject KBoardService service
@inject NavigationManager NavManager
@inject DialogService DialogService
@inject MatIconService IconService
@inject NoteService NoteService
@inject ILocalStorageService localstore


@implements IDisposable


<RadzenPanel>
    <HeaderTemplate>
        <RadzenIcon Icon="@NoteService.selectedNote.Icon" Style="padding-right: 0px; font-size:2em"></RadzenIcon>
        <RadzenText TextStyle="TextStyle.H4" Text="@note.Title" Style="max-width: 90%" contenteditable="true" />
        <RadzenIcon @onclick="()=>OpenSideDialog()" Icon="more_horiz" Style="cursor: pointer; padding-right: 20px; font-size: 2em" class="add-todoitem-icon"></RadzenIcon>
    </HeaderTemplate>
    <ChildContent>
        <hr />
        <RadzenHtmlEditor @bind-Value=@note.Content style="height: 80vh;" UploadUrl="upload/image">

        </RadzenHtmlEditor>
    </ChildContent>
</RadzenPanel>

@code {

    [Parameter]
    public string noteId { get; set; }
    string userid;

    public Note note = new Note();
    public string? selectedIcon;

    DialogPosition position;
    bool closeDialogOnOverlayClick;
    bool showMask;

    async Task OpenSideDialog()
    {
        await DialogService.OpenSideAsync<IconSelectDialog>("", options: new SideDialogOptions { CloseDialogOnOverlayClick = closeDialogOnOverlayClick, Position = position, ShowMask = showMask });
    }

    protected override async Task OnInitializedAsync()
    {
        userid = await localstore.GetItemAsync<string>("UserId");

        note.Title = NoteService.selectedNote.Title;
        note.Content = NoteService.selectedNote.Content;

        selectedIcon = IconService.GetSelectedIcon();
        note.Icon = selectedIcon;
    }


    /*[JSInvokable]
    public async Task SaveNoteBeforeUnload()
    {
        await NoteService.UpdateNote(userid, NoteService.selectedNote.Id, note);
    }*

    /*[JSInvokable]
    public async Task AttachBeforeUnloadListener()
    {
    //    await JSRuntime.InvokeVoidAsync("window.addEventListener", "beforeunload", DotNetObjectReference.Create(this), "SaveNoteBeforeUnload");
    }
    */

    async void IDisposable.Dispose()
    {
        await NoteService.UpdateNote(userid, NoteService.selectedNote.Id, note);
 }
}
