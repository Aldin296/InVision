@page "/note/{noteId}"
@using InVision.Data
@using InVision.Data.Service
@using InVision.Data.Model
@inject KBoardService service
@inject NavigationManager NavManager
@inject DialogService DialogService
@inject MatIconService IconService
@inject NoteService NoteService
@inject ILocalStorageService localstore
@implements IDisposable


<RadzenPanel>
    <HeaderTemplate>
        <RadzenIcon Icon="@NoteService.selectedNote.Icon" Style="padding-right: 0px; font-size:2em"></RadzenIcon>
        <input @bind="@note.Title" @oninput="OnTitleChange" class="custom-h4" style="width:90%"/>
        <RadzenIcon @onclick="()=>OpenSideDialog()" Icon="more_horiz" Style="cursor: pointer; padding-right: 20px; font-size: 2em" class="add-todoitem-icon"></RadzenIcon>
    </HeaderTemplate>
    <ChildContent>
        <hr />

        <RadzenHtmlEditor @bind-Value=@note.Content style="height: 80vh;" Execute="@OnExecute">
            <RadzenHtmlEditorUndo />
            <RadzenHtmlEditorRedo />
            <RadzenHtmlEditorSeparator />
            <RadzenHtmlEditorBold />
            <RadzenHtmlEditorItalic />
            <RadzenHtmlEditorUnderline />
            <RadzenHtmlEditorStrikeThrough />
            <RadzenHtmlEditorAlignLeft/>
            <RadzenHtmlEditorAlignCenter/>
            <RadzenHtmlEditorAlignRight />
            <RadzenHtmlEditorJustify />
            <RadzenHtmlEditorUnorderedList />
            <RadzenHtmlEditorOrderedList />
            <RadzenHtmlEditorSeparator />
            <RadzenHtmlEditorColor />
            <RadzenHtmlEditorBackground />
            <RadzenHtmlEditorRemoveFormat />
            <RadzenHtmlEditorSubscript />
            <RadzenHtmlEditorSuperscript />
            <RadzenHtmlEditorSource/>
            <RadzenHtmlEditorLink/>
            <RadzenHtmlEditorFontSize/>
            <RadzenHtmlEditorCustomTool CommandName="LinkDiffrentNote" Icon="control_point" />


        </RadzenHtmlEditor>
    </ChildContent>
</RadzenPanel>

@code {

    [Parameter]
    public string noteId { get; set; }
    string userid;

    public Note note = new Note();
    public string? selectedIcon;

    string noteTitle;

    protected override async Task OnInitializedAsync()
    {
        userid = await localstore.GetItemAsync<string>("UserId");

        note.Title = NoteService.selectedNote.Title;
        //note.Content = @"<link rel=""stylesheet"" href=""https://fonts.googleapis.com/icon?family=Material+Icons"">";
        note.Content = NoteService.selectedNote.Content;

        selectedIcon = IconService.GetSelectedIcon();
        note.Icon = selectedIcon;
    }

    async Task OnExecute(HtmlEditorExecuteEventArgs args)
    {
        if (args.CommandName == "LinkDiffrentNote")
        {
            await LinkDiffrentNote(args.Editor);
        }
    }


    async Task LinkDiffrentNote(RadzenHtmlEditor editor)
    {
        await editor.SaveSelectionAsync();

        var result = await DialogService.OpenAsync<ChooseNotePage>("Select a Note");

        await editor.RestoreSelectionAsync();

        if (result != null)
        {
            await editor.ExecuteCommandAsync(HtmlEditorCommands.InsertHtml, $@"<a href=""https://blazor.radzen.com/dashboard""><i class=""material-icons"" @onclick=""() => HandleIconClick(result)"">{result}</i> </a>");
        }
    }

    private void OnTitleChange(ChangeEventArgs e)
    {
        note.Title = e.Value.ToString();
    }


    void HandleIconClick(string iconName)
    {
        // Handle the click event here
        // For example, you can display a message:
        Console.WriteLine($"Icon clicked: {iconName}");
        // Or perform any other desired action
    }

    async Task OpenSideDialog()
    {
        await DialogService.OpenSideAsync<IconSelectDialog>("",options: new SideDialogOptions { CloseDialogOnOverlayClick = true, Position = DialogPosition.Right, ShowMask = true, });
    }






    async void IDisposable.Dispose()
    {
        Console.WriteLine(note.Title);
        await NoteService.UpdateNote(userid, NoteService.selectedNote.Id, note);
        Console.WriteLine(note.Title);
    }
}
