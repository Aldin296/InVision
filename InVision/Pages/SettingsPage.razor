@page "/settings"
@using InVision.Data
@inject Blazored.LocalStorage.ILocalStorageService localstore
@inject Data.UserService userservice
@inject NotificationService notificationService


<RadzenPanel>
    <HeaderTemplate>
        <RadzenText TextStyle="TextStyle.H6" Class="rz-display-flex rz-align-items-center rz-m-0">
            <RadzenIcon Icon="settings" class="rz-mr-1" /><b>User Settings</b>
        </RadzenText>
    </HeaderTemplate>
    <ChildContent>
        <br />
        <RadzenRow Style="height: 100%" Gap="2rem">
            <RadzenColumn Size="3">
                <h3 style="text-align: left; margin-left: 20px;">Avatar</h3>
            </RadzenColumn>
        </RadzenRow>
        <hr />
        <RadzenRow Gap="2rem">
            <RadzenColumn Style="display: flex; align-items: center; margin-left: 20px;" Size="3">
                <label for="fileInput" style="cursor: pointer;">
                    <RadzenImage Path="@selectedImagePath" Style="width: 8rem;" />
                </label>
                <InputFile type="file" id="fileInput" style="display: none;" accept="image/*" OnChange="@HandleFileChange" multiple />
            </RadzenColumn>
        </RadzenRow>

        <br />
        <br />

        <RadzenRow Style="height: 100%; margin: 10,10,10,10">
            <RadzenColumn Size="3">
                <h3 style="text-align: left; margin-left: 20px;">User Details</h3>
            </RadzenColumn>

        </RadzenRow>
        <hr />

        <RadzenRow Style="margin-bottom: 10px;">
            <RadzenColumn Size="2" Style="display: flex; align-items: center;">
                <RadzenText style="text-align: left; margin-left: 20px;" TextStyle="TextStyle.H5">Name</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="10">
                <RadzenTextBox Style="width:50%" Placeholder=@user?.Name @bind-Value="username"></RadzenTextBox>
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow Style="margin-bottom: 10px;">
            <RadzenColumn Size="2" Style="display: flex; align-items: center;">
                <RadzenText style="text-align: left; margin-left: 20px;" TextStyle="TextStyle.H5">E-Mail</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="10">
                <RadzenTextBox Style="width:50%" Placeholder=@user?.Email @bind-Value="useremail"></RadzenTextBox>
            </RadzenColumn>
        </RadzenRow>


        <RadzenRow Style="margin-bottom: 10px;">
            <RadzenColumn Size="2" Style="display: flex; align-items: center;">
                <RadzenText style="text-align: left; margin-left: 20px;" TextStyle="TextStyle.H5">Old Password</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="10">
                <!--
                <RadzenPassword Style="width:50%" @bind-Value=@oldPassword Placeholder="Enter old password..." AutoComplete="false" aria-label="enter password" />
                -->
                <RadzenFormField Variant="Variant.Outlined" Style="width: 50%">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="@oldPassword" Visible="@(!passwordVisibleOld)" Placeholder="Enter old Password" />
                        <RadzenPassword @bind-Value="@oldPassword" Visible="@passwordVisibleOld" />
                    </ChildContent>
                    <End>
                        <RadzenButton Icon="@(passwordVisibleOld ? "visibility" : "visibility_off")" Click="TogglePasswordOld" Variant="Variant.Text" Size="ButtonSize.Small" />
                    </End>
                </RadzenFormField>
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow Style="margin-bottom: 10px;">
            <RadzenColumn Size="2" Style="display: flex; align-items: center;">
                <RadzenText style="text-align: left; margin-left: 20px;" TextStyle="TextStyle.H5">New Password</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="10">
                <RadzenFormField Variant="Variant.Outlined" Style="width: 50%">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="@newPassword" Visible="@(!passwordVisibleNew)" Placeholder="Enter new Password" />
                        <RadzenPassword @bind-Value="@newPassword" Visible="@passwordVisibleNew" />
                    </ChildContent>
                    <End>
                        <RadzenButton Icon="@(passwordVisibleNew ? "visibility" : "visibility_off")" Click="TogglePasswordNew" Variant="Variant.Text" Size="ButtonSize.Small" />
                    </End>
                </RadzenFormField>
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow>
            <RadzenColumn Size="2" Style="margin-bottom: 10px; height:60px">
                <RadzenText style="text-align: left; margin-left: 20px;" TextStyle="TextStyle.H6">Do you want to receive emails?</RadzenText>
            </RadzenColumn>
            <RadzenColumn Size="10" Style="display: flex; align-items: center; height:60px">
                <RadzenToggleButton @bind-Value=@recieveEmails Change=@OnChange Text="@(recieveEmails ? "Turn off Notifications" : "Turn on Notifications" )" ButtonStyle="ButtonStyle.Primary"
                                    ToggleButtonStyle="ButtonStyle.Light" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Turn off Notifications" }})" />
            </RadzenColumn>
        </RadzenRow>

        <hr />
        <div style="display:flex; justify-content: flex-end">
            <RadzenButton Click="SaveProfile">Save</RadzenButton>
        </div>

    </ChildContent>
</RadzenPanel>



@code {

    User? user;
    public string? userid;
    public string selectedImagePath = "https://static-00.iconduck.com/assets.00/profile-circle-icon-512x512-zxne30hp.png";
    public byte[]? imageBytes;
    public string? username;
    public string? useremail;
    public string? newPassword;
    public string? oldPassword;

    bool passwordVisibleNew = true;
    bool passwordVisibleOld = true;

    bool recieveEmails = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        userid = await localstore.GetItemAsync<string>("UserId");
        user = await userservice.GetUserById(userid);


        if (user != null && user.ProfilePicture != null && user.ProfilePicture.Length > 0)
        {
            // Convert byte array to base64 string
            selectedImagePath = $"data:image/png;base64,{Convert.ToBase64String(user.ProfilePicture)}";
        }
        else
        {
            // Set a default image path if no profile picture is available
            selectedImagePath = "https://static-00.iconduck.com/assets.00/profile-circle-icon-512x512-zxne30hp.png";
        }
        if (firstRender)
        {
            StateHasChanged();
        }
    }


    //Handling the image input and converting it to byte code for saving it in the database
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File; // Get the selected image file

        if (imageFile != null)
        {
            try
            {
                // Read the selected image file as a byte array
                using (var stream = imageFile.OpenReadStream())
                {
                    using (var memoryStream = new MemoryStream())
                    {
                        await stream.CopyToAsync(memoryStream);
                        imageBytes = memoryStream.ToArray();
                    }
                }

                selectedImagePath = $"data:{imageFile.ContentType};base64,{Convert.ToBase64String(imageBytes)}";
            }
            catch (Exception ex)
            {
                // Handle any exceptions here, such as logging the error or displaying a message to the user
                Console.WriteLine($"Error converting image to byte array: {ex.Message}");
            }
        }
    }

    private async Task SaveProfile(MouseEventArgs e)
    {
        bool passwordStatus = true;
        if (oldPassword != null)
        {
            passwordStatus = await userservice.PasswordControl(userid, oldPassword);
        }

        if (useremail != null)
        {
            user.Email = useremail;
        }
        if (username != null)
        {
            user.Name = username;
        }
        if (imageBytes != null)
        {
            user.ProfilePicture = imageBytes;
        }

        if (passwordStatus == true)
        {
            //Da das neue Passwort ebenfalls verschlüsselt werden muss, musste ich hier eine eigene hashPassword methode aufrufen
            //Und dessen werte dann dem user geben damit diese geupdated werden
            HashPassword hashpass = userservice.hashPassword(newPassword);
            user.Password = hashpass.Hashed;
            user.salt = hashpass.Salt;
        }
        await userservice.UpdateUser(userid, user);
    }

    void TogglePasswordNew()
    {
        passwordVisibleNew = !passwordVisibleNew;
    }

    void TogglePasswordOld()
    {
        passwordVisibleOld = !passwordVisibleOld;
    }

    private void OnChange(bool newValue)
    {
        if (newValue)
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "you are receiving emails"
                });
        }
        else
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary ="you are NOT receiving emails"
                });
        }
    }
}
