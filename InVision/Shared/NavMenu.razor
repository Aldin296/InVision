@using InVision.Authentication
@inject NavigationManager NavManager
@inject AuthenticationStateProvider authStateProvider
@inject ILocalStorageService localstore



<RadzenStack AlignItems="AlignItems.Center">

	<RadzenStack AlignItems="AlignItems.Center" Class="rz-mx-auto rz-my-2">
		<RadzenIcon Icon="account_circle" style="font-size: 5em;" />
		<RadzenText style="color: black;"></RadzenText>
	</RadzenStack>

	<RadzenPanelMenu Style="width:250px" Multiple="false">
		<RadzenPanelMenuItem Text="Dashboard" Path="/index" Icon="dashboard"></RadzenPanelMenuItem>
		<AuthorizeView Roles="User">
		<RadzenPanelMenuItem Text="Calendar" Path="/calendar" Icon="event"></RadzenPanelMenuItem>
		<RadzenPanelMenuItem Text="Kanban" Path="/allKanbanBoards" Icon="dns"></RadzenPanelMenuItem>
		<RadzenPanelMenuItem Text="Notes" Path="/notes" Icon="assignment"></RadzenPanelMenuItem>
		</AuthorizeView>
	</RadzenPanelMenu>
	<RadzenStack >
        <RadzenButton Click="Click_Logout">Log out</RadzenButton>
	</RadzenStack>
</RadzenStack>
@code {

	public async void Click_Logout()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		await customAuthStateProvider.UpdateAuthenticationState(null);
		await localstore.RemoveItemAsync("UserId");
		await localstore.ClearAsync();
		NavManager.NavigateTo("/");

	}
}