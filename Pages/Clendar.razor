@page "/calendar"
@using InVision.Data
@using InVision.Pages
@inject DialogService DialogService

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
				 TextProperty="Text" SelectedIndex="2"
				 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
	<RadzenDayView />
	<RadzenWeekView />
	<RadzenMonthView />
	<RadzenYearView />
</RadzenScheduler>

@code {
	RadzenScheduler<Appointment> scheduler;
	Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

	IList<Appointment> appointments = new List<Appointment>
	{
		new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
		new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
		new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
		new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
		new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
		new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
		new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
	};

	void OnSlotRender(SchedulerSlotRenderEventArgs args)
	{
		// Highlight today in month view
		if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
		{
			args.Attributes["style"] = "background:rgba(232, 232, 250);";
		}

		// Highlight working hours (9-18)
		if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
		{
			args.Attributes["style"] = "background: rgba(232, 232, 250);";
		}
	}

	async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
	{
		if (args.View.Text != "Year")
		{
			Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
				new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

			if (data != null)
			{
				appointments.Add(data);
				// Either call the Reload method or reassign the Data property of the Scheduler
				await scheduler.Reload();
			}
		}
	}

	async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
	{
		var copy = new Appointment
			{
				Start = args.Data.Start,
				End = args.Data.End,
				Text = args.Data.Text
			};

		var data = await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

		if (data != null)
		{
			// Update the appointment
			args.Data.Start = data.Start;
			args.Data.End = data.End;
			args.Data.Text = data.Text;
		}

		await scheduler.Reload();
	}

	void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
	{


		args.Attributes["style"] = "background: rgba(67, 64, 210)";

	}
}